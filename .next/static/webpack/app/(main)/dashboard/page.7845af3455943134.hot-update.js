"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(main)/dashboard/page",{

/***/ "(app-pages-browser)/./services/api.ts":
/*!*************************!*\
  !*** ./services/api.ts ***!
  \*************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authAPI: () => (/* binding */ authAPI),\n/* harmony export */   carAPI: () => (/* binding */ carAPI)\n/* harmony export */ });\n/**\n * API Service\n * \n * This service handles all API calls to the backend server.\n * It provides methods for authentication, car management, and other operations.\n */ const API_BASE_URL = '/api';\n// Helper function to get auth headers\nconst getHeaders = (contentType)=>{\n    const headers = new Headers();\n    const token = localStorage.getItem('token');\n    if (token) {\n        headers.append('Authorization', \"Bearer \".concat(token));\n    }\n    if (contentType) {\n        headers.append('Content-Type', contentType);\n    }\n    return headers;\n};\n// Helper function to handle API responses\nconst handleResponse = async (response)=>{\n    if (!response.ok) {\n        console.error(\"HTTP error! status: \".concat(response.status, \", statusText: \").concat(response.statusText));\n        let errorMessage = \"API Error: \".concat(response.status, \" \").concat(response.statusText);\n        try {\n            const contentType = response.headers.get('Content-Type');\n            if (contentType && contentType.includes('application/json')) {\n                const errorData = await response.json();\n                console.log('Error response data:', errorData);\n                errorMessage = errorData.message || errorData.error || errorMessage;\n            } else {\n                const textError = await response.text();\n                console.log('Error response text:', textError);\n                errorMessage = textError || errorMessage;\n            }\n        } catch (e) {\n            console.error('Failed to parse error response:', e);\n        }\n        throw new Error(errorMessage);\n    }\n    try {\n        return await response.json();\n    } catch (error) {\n        console.error('Failed to parse success response as JSON:', error);\n        return {}; // Return empty object for non-JSON success responses\n    }\n};\n// Authentication API calls\nconst authAPI = {\n    /**\n   * Register a new user\n   * @param dealerData Object containing dealer registration details\n   */ register: async (formData)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/auth/register\"), {\n            method: 'POST',\n            body: formData\n        });\n        return handleResponse(response);\n    },\n    /**\n   * Login user\n   * @param email User's email\n   * @param password User's password\n   */ login: async (email, password)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/auth/login\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                email,\n                password\n            })\n        });\n        return handleResponse(response);\n    },\n    /**\n   * Logout user\n   */ logout: async ()=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/auth/logout\"), {\n            method: 'POST',\n            headers: getHeaders()\n        });\n        return handleResponse(response);\n    },\n    /**\n   * Get current user profile\n   */ getCurrentUser: async ()=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/auth/me\"), {\n            headers: getHeaders()\n        });\n        return handleResponse(response);\n    },\n    /**\n   * Update user profile\n   * @param profileData Object containing profile information to update\n   */ updateProfile: async (formData)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/auth/update-profile\"), {\n            method: 'PUT',\n            headers: getHeaders(),\n            body: formData\n        });\n        return handleResponse(response);\n    },\n    /**\n   * Change user password\n   * @param passwordData Object containing current and new passwords\n   */ changePassword: async (passwordData)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/auth/change-password\"), {\n            method: 'PUT',\n            headers: getHeaders('application/json'),\n            body: JSON.stringify(passwordData)\n        });\n        return handleResponse(response);\n    }\n};\n// Car inventory API calls\nconst carAPI = {\n    /**\n   * Get all cars with optional filters\n   * @param filters Object containing filter parameters\n   */ getAllCars: async function() {\n        let filters = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        const queryParams = new URLSearchParams(filters);\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/cars?\").concat(queryParams.toString()), {\n            headers: getHeaders()\n        });\n        return handleResponse(response);\n    },\n    /**\n   * Get current dealer's listings\n   * @param dealerId The ID of the dealer whose listings are to be fetched\n   */ getMyListings: async (dealerId)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/cars/dealer/\").concat(dealerId), {\n            headers: getHeaders()\n        });\n        return handleResponse(response);\n    },\n    /**\n   * Get a specific car by ID\n   * @param id Car ID\n   */ getCarById: async (id)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/cars/\").concat(id), {\n            headers: getHeaders()\n        });\n        return handleResponse(response);\n    },\n    /**\n   * Create a new car listing\n   * @param carData FormData containing car details and images\n   */ createCar: async (carData)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/cars/create\"), {\n            method: 'POST',\n            headers: getHeaders(),\n            body: carData\n        });\n        return handleResponse(response);\n    },\n    /**\n   * Update an existing car listing\n   * @param id Car ID\n   * @param carData FormData containing updated car details and images\n   */ updateCar: async (id, carData)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/cars/\").concat(id), {\n            method: 'PUT',\n            headers: getHeaders(),\n            body: carData\n        });\n        return handleResponse(response);\n    },\n    /**\n   * Delete a car listing\n   * @param id Car ID\n   */ deleteCar: async (id)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/cars/\").concat(id), {\n            method: 'DELETE',\n            headers: getHeaders()\n        });\n        return handleResponse(response);\n    },\n    /**\n   * Update car status\n   * @param id Car ID\n   * @param status New status ('Available', 'Sold', 'Reserved')\n   */ updateCarStatus: async (id, status)=>{\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/cars/\").concat(id, \"/status\"), {\n                method: 'PUT',\n                headers: getHeaders('application/json'),\n                body: JSON.stringify({\n                    status\n                })\n            });\n            const data = await handleResponse(response);\n            return data;\n        } catch (error) {\n            throw error;\n        }\n    }\n}; // Transactions API calls\n // export const transactionAPI = {\n //   getPurchases: async () => {\n //     const response = await fetch(`${API_BASE_URL}/transactions/purchases`, {\n //       headers: getHeaders(),\n //     });\n //     return handleResponse(response);\n //   },\n //   getSales: async () => {\n //     const response = await fetch(`${API_BASE_URL}/api/transactions/sales`, {\n //       headers: getHeaders(),\n //     });\n //     return handleResponse(response);\n //   },\n // };\n // Notifications API calls\n // export const notificationAPI = {\n //   getNotifications: async () => {\n //     const response = await fetch(`${API_BASE_URL}/api/notifications`, {\n //       headers: getHeaders(),\n //     });\n //     return handleResponse(response);\n //   },\n //   markAsRead: async (ids: string[]) => {\n //     const headers = getHeaders('application/json')\n //     const response = await fetch(`${API_BASE_URL}/api/notifications/read`, {\n //       method: 'POST',\n //       headers: headers,\n //       body: JSON.stringify({ ids }),\n //     });\n //     return handleResponse(response);\n //   },\n //   markAllAsRead: async () => {\n //     const headers = getHeaders('application/json')\n //     const response = await fetch(`${API_BASE_URL}/api/notifications/mark-all-read`, {\n //       method: 'POST',\n //       headers: headers,\n //     });\n //     return handleResponse(response);\n //   },\n //   getUnreadCount: async () => {\n //       const headers = getHeaders('application/json')\n //     const response = await fetch(`${API_BASE_URL}/api/notifications/unread-count`, {\n //       headers: headers,\n //     });\n //     return handleResponse(response);\n //   },\n // };\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./services/api.ts\n"));

/***/ })

});